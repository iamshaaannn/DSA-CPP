/*
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105


*/

```cpp
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& arr) {
    vector<vector<int>> res;
	int N = arr.size();
	sort(arr.begin(), arr.end());
	for(int i = 0 ; i<N-2;i++){
		
		if(i>0){
			while(i<N && arr[i] == arr[i-1])
       	        i++;
    	}
        int low = i + 1;
		int high = N - 1;
		while( low < high){
			if((arr[i] + arr[low] + arr[high]) < 0){
				low++;
			}else if((arr[i] + arr[low] + arr[high]) > 0)
				high--;
			else{
	                
                vector<int> vt(3);
                    vt[0] = arr[i];
                    vt[1] = arr[low];
                    vt[2] = arr[high];
                    
                    if(res.size() == 0)
                        res.push_back(vt);
                    else if(res[res.size() - 1] != vt)
                    res.push_back(vt);
                    high--;
                    low++;
				}
		}	
	}
	return res;
    }
};
```
