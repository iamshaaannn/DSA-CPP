Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

 

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]

```cpp

#include<bits/stdc++.h>
using namespace std;
vector<int> solve(vector<int>arr, int target){
	unordered_map<int , int> hash; //map created.
	vector<int> ans; //to store ans.
	for(int i = 0;i<arr.size();i++){ //to traverse.
		int targetToFind = target - arr[i]; //to compare to the target.
		if(hash.find(targetToFind) != hash.end()){ //check in hashmap
			ans.push_back(hash[targetToFind]); //if ans found, 
			ans.push_back(i);
			return ans;
		}
		hash[arr[i]] = i;
	}
	for(auto it: ans){
		cout<<it<<" ";
	}
	return ans;
	
}
int main(){
	vector<int> arr{2,4,5,6,9};
	vector<int> ans = solve(arr, 11);
	for(auto it: ans){
		cout<<it<<" ";
	}
	return 0;
}

```
